
import React from 'react';
import { getTeamKitColor, KitType } from '../types/teamKits';
import { Match, TournamentTeam } from '../types/tournament';
import { Trophy } from 'lucide-react';

interface TournamentBracketProps {
  matches: Match[];
  onMatchClick?: (match: Match) => void;
  showFullBracket?: boolean;
  winnerTeam?: TournamentTeam; // Add prop to receive the winner
}

const TournamentBracket: React.FC<TournamentBracketProps> = ({ 
  matches, 
  onMatchClick,
  showFullBracket = false,
  winnerTeam // Add winner team prop
}) => {
  // Group matches by round
  const roundMatches = Array.from({ length: 7 }, (_, i) => {
    return matches.filter(match => match.round === i + 1);
  });
  
  // Get match by round and position
  const getMatch = (round: number, position: number) => {
    return matches.find(match => match.round === round && match.position === position);
  };
  
  // Determine CSS class for a match based on its status
  const getMatchClass = (match: Match) => {
    if (!match.teamA || !match.teamB) return "opacity-50";
    if (match.played) return "opacity-100";
    return "opacity-80";
  };

  // Get background color style based on team's kit color
  const getTeamColorStyle = (team?: TournamentTeam) => {
    if (!team) return {};
    
    // Use the team's name to get the kit color from our system
    const kitColor = getTeamKitColor(team.name, 'home' as KitType);
    return { 
      backgroundColor: `${kitColor}20`, 
      borderLeft: `4px solid ${kitColor}` 
    };
  };

  // Determine if a team is the winner of a match
  const isWinner = (match: Match, team?: TournamentTeam) => {
    if (!match.played || !match.winner || !team) return false;
    return match.winner.id === team.id;
  };

  // Transliterate Russian team names to Latin alphabet
  const transliterateRussianName = (name: string): string => {
    // Special case for Greek team
    if (name === 'ŒüŒªœÖŒºœÄŒπŒ±Œ∫œåœÇ') return 'Olympiakos';
    
    // Map of Cyrillic to Latin characters
    const cyrillicToLatin: Record<string, string> = {
      '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo', 
      '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', 
      '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', 
      '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch', 
      '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
      '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', 
      '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', 
      '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', 
      '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch', 
      '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    };

    // Check if the name has Cyrillic characters
    const hasCyrillic = /[–ê-–Ø–∞-—è–Å—ë]/.test(name);
    
    if (!hasCyrillic) return name;
    
    // Transliterate character by character
    let result = '';
    for (let i = 0; i < name.length; i++) {
      const char = name[i];
      result += cyrillicToLatin[char] || char;
    }
    
    return result;
  };

  // Function to display team name (with transliteration for Russian teams)
  const getDisplayTeamName = (team?: TournamentTeam): string => {
    if (!team) return "TBD";
    return transliterateRussianName(team.name);
  };

  const handleMatchClick = (match: Match) => {
    if (onMatchClick && match.teamA && match.teamB && !match.played) {
      onMatchClick(match);
    }
  };

  // Determine how many rounds to display
  const displayRounds = showFullBracket 
    ? roundMatches 
    : roundMatches.slice(0, 7); // Show all rounds

  return (
    <div className="tournament-bracket flex overflow-x-auto min-w-full" style={{ minWidth: '1600px' }}>
      {displayRounds.map((matches, roundIndex) => (
        <div key={roundIndex} className="round-column flex-1 px-2 min-w-[200px]">
          <h3 className={`text-center font-semibold mb-4 ${roundIndex === 6 ? "text-amber-600 text-xl" : ""}`}>
            {roundIndex === 0 ? "Round of 128" : 
             roundIndex === 1 ? "Round of 64" : 
             roundIndex === 2 ? "Round of 32" : 
             roundIndex === 3 ? "Round of 16" : 
             roundIndex === 4 ? "Quarter-finals" : 
             roundIndex === 5 ? "Semi-finals" : 
             roundIndex === 6 ? (
               <span className="flex items-center justify-center gap-2">
                 <Trophy className="h-5 w-5 text-amber-600" />
                 Final
                 <Trophy className="h-5 w-5 text-amber-600" />
               </span>
             ) : "Unknown Round"}
          </h3>
          
          <div className={`flex flex-col gap-${7 - roundIndex} justify-around h-auto`} 
               style={{ gap: `${Math.pow(2, roundIndex + 1) * 2}px` }}>
            
            {matches.map(match => {
              const isFinalMatch = match.round === 7;
              
              return (
                <div 
                  key={match.id} 
                  className={`match-container relative p-2 border rounded-md shadow-sm mb-1 
                    ${getMatchClass(match)} 
                    ${match.teamA && match.teamB && !match.played ? 'cursor-pointer hover:bg-gray-50 transition-colors' : ''}
                    ${isFinalMatch ? 'border-amber-400 border-2 shadow-md' : ''}
                  `}
                  onClick={() => handleMatchClick(match)}
                >
                  <div 
                    className={`team-entry p-2 rounded flex justify-between items-center mb-1 
                      ${isWinner(match, match.teamA) ? 'bg-green-50' : ''}
                      ${isFinalMatch && isWinner(match, match.teamA) ? 'bg-amber-50' : ''}
                    `}
                    style={getTeamColorStyle(match.teamA)}
                  >
                    <span className="font-medium truncate max-w-[65%]">
                      {getDisplayTeamName(match.teamA)}
                    </span>
                    <div className="flex items-center gap-2 justify-end">
                      {match.played && match.score && (
                        <span className="text-sm font-bold text-left">{match.score.teamA}</span>
                      )}
                    </div>
                  </div>
                  
                  <div 
                    className={`team-entry p-2 rounded flex justify-between items-center 
                      ${isWinner(match, match.teamB) ? 'bg-green-50' : ''}
                      ${isFinalMatch && isWinner(match, match.teamB) ? 'bg-amber-50' : ''}
                    `}
                    style={getTeamColorStyle(match.teamB)}
                  >
                    <span className="font-medium truncate max-w-[65%]">
                      {getDisplayTeamName(match.teamB)}
                    </span>
                    <div className="flex items-center gap-2 justify-end">
                      {match.played && match.score && (
                        <span className="text-sm font-bold text-left">{match.score.teamB}</span>
                      )}
                    </div>
                  </div>
                  
                  {match.played && match.winner && (
                    <div className={`absolute -right-1 -top-1 w-6 h-6 
                      ${isFinalMatch ? 'bg-amber-500' : 'bg-green-500'} 
                      rounded-full flex items-center justify-center text-white text-xs font-bold`}
                    >
                      {isFinalMatch ? 'üèÜ' : '‚úì'}
                    </div>
                  )}
                  
                  {match.played && match.goldenGoal && (
                    <div className="absolute -left-1 -top-1 w-6 h-6 bg-amber-500 rounded-full flex items-center justify-center text-white text-xs font-bold" title="Golden Goal">
                      ‚öΩ
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      ))}
    </div>
  );
};

export default TournamentBracket;
